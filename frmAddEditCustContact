using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Text.RegularExpressions;

namespace Customers
{
    public partial class frmAddEditCustContact : Form
    {
        clsDB clsDB = new clsDB();

        public int _custID;
        public int CustomerID
        {
            get { return _custID; }
        }

        public frmAddEditCustContact(int _id)
        {
            InitializeComponent();
            _custID = _id;
        }

        private void cmdClose_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private bool Validate()
        {
            if (string.IsNullOrEmpty(txtContact.Text.Trim()))
            {
                MessageBox.Show("Contact Name required!", "Required",
                    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                txtContact.Focus();
                return false;
            }

            if (!Regex.IsMatch(txtEmail.Text.Trim(), @"\A(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z", RegexOptions.IgnoreCase))
            {
                MessageBox.Show("Specify a valid e-mail!", "Valid e-Mail address",
                    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                txtEmail.Focus();
                return false;
            }
            else if (string.IsNullOrEmpty(txtEmail.Text.Trim()))
            {
                MessageBox.Show("Email required!", "Required",
                    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                txtEmail.Focus();
                return false;
            }

            if (!Regex.IsMatch(txtContactNumber.Text.Trim(), "^\\Â£?[+-]?[\\d,]*\\.?\\d{0,2}$"))
            {
                MessageBox.Show("Only Numeric values allowed!", "Numeric Values Only",
                    MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                txtContactNumber.Focus();
                return false;
            }

            return true;
        }

        private void cmdAddCust_Click(object sender, EventArgs e)
        {
            try
            {
                if (Validate())
                {
                    string query = "INSERT INTO CustContacts (CustomerID,Name,Email,ContactNr) " +
                    "VALUES (" + CustomerID + ", '" + txtContact.Text.Trim() + "', '" + txtEmail.Text.Trim() + "', " 
                                        + txtContactNumber.Text.Trim() + ");";
                    clsDB.setData(query);

                    MessageBox.Show("New Customer Contact added.", "New Customer Contact", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Application Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}
